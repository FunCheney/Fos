/// 最简单的智能指针是 Box，其类型是 Box<T>
/// box 允许将织一个值放在堆上而不是栈上，留在栈上的则是指向堆上数据的指针

/// 除了数据存储在堆上而不是栈上，box 没有性能的损失，也没有很多额外的功能，用于如下的场景
/// 1. 当有一个在编译时位置大小的类型，而又想在需要确切大小的上下文中使用
/// 2. 当有大量的数据并确保数据在不被拷贝的情况下转移所有权的时候
/// 3. 当希望拥有一个值并只关心它的类型是否实现了特定的 trait 而不是具体类型的时候


/// 使用 Box<T> 在堆上储存数据
#[test]
fn test_01() {
    // 定义了变量 b
    // 指向一个被分配在堆上的值为 5 的 Box
    let  b = Box::new(5);
    println!("b = {b}")
    // b 这样的 box 在 main 的末尾离开作用域时，它将被释放。这
    // 个释放过程作用于 box 本身（位于栈上）和它所指向的数据（位于堆上）。
}

/// Box 允许创建递归类型
/// 递归类型的值可以拥有一个同类型的值作为启值的一部分
